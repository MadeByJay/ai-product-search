import { Module } from '@nestjs/common';
import { Kysely, PostgresDialect, ColumnType, Generated } from 'kysely';
import pg from 'pg';

// Helper for a timestamp that is selected as Date, optional on insert/update
type Timestamp = ColumnType<Date, Date | undefined, Date | undefined>;

// DI tokens
export const KYSELY_DB = 'KYSELY_DB';

// --- Table type definitions ---
export interface ProductsTable {
  id: string;
  title: string;
  description: string;
  price: number;
  category: string | null;
  image_url: string | null;
  // no embedding here (pgvector is not directly typed); we keep vector ops in raw SQL if needed
}

export interface AnalyticsSearchEventsTable {
  id: Generated<number>; // <-- generated by DB
  query: string;
  latency_ms: number;
  result_count: number;
  at: Timestamp; // <-- default now(), optional on insert
}

export interface UsersTable {
  id: string; // uuid
  email: string;
  name: string | null;
  avatar_url: string | null;
  created_at: Date | null;
}

export interface SavedItemsTable {
  user_id: string; // uuid
  product_id: string; // text
  created_at: Date | null;
}

export interface UserPreferencesTable {
  user_id: string; // uuid PK
  default_category: string | null;
  price_max: number | null;
  page_limit: number | null;
  theme: string | null;
  updated_at: Date | null;
}

export interface AuditLogsTable {
  id: Generated<number>; // DB-generated
  user_id: string | null; // nullable FK
  action: string;
  // JSON value, nullable; insert/update can pass undefined or null
  details: ColumnType<
    Record<string, unknown> | null,
    Record<string, unknown> | null | undefined,
    Record<string, unknown> | null | undefined
  >;
  at: Timestamp; // DEFAULT now()
}
export interface DB {
  products: ProductsTable;
  analytics_search_events: AnalyticsSearchEventsTable;
  users: UsersTable;
  saved_items: SavedItemsTable;
  user_preferences: UserPreferencesTable;
  audit_logs: AuditLogsTable;
}

export interface DB {
  products: ProductsTable;
  analytics_search_events: AnalyticsSearchEventsTable;
  users: UsersTable;
  saved_items: SavedItemsTable;
  user_preferences: UserPreferencesTable;
  audit_logs: AuditLogsTable;
}

@Module({
  providers: [
    {
      provide: 'KYSELY_DB',
      useFactory: () => {
        const pool = new pg.Pool({
          connectionString: process.env.VECTOR_DB_URL,
        });
        return new Kysely<DB>({ dialect: new PostgresDialect({ pool }) });
      },
    },
  ],
  exports: ['KYSELY_DB'],
})
export class KyselyModule {}
